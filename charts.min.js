// Data Visualization Charts
const Charts = {
    init() {
        this.createImpactChart();
        this.enhanceCarbonCalculator();
    },

    createImpactChart() {
        const impactSection = document.querySelector('.impact-grid');
        if (!impactSection) return;

        const chartContainer = document.createElement('div');
        chartContainer.className = 'impact-chart';
        chartContainer.innerHTML = `
            <canvas id="impactChart" width="400" height="200"></canvas>
        `;
        impactSection.parentNode.appendChild(chartContainer);

        this.drawChart();
    },

    drawChart() {
        const canvas = document.getElementById('impactChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const data = [10000, 5000, 50, 15];
        const labels = ['People', 'Hectares', 'Projects', 'Policies'];
        const colors = ['#16a34a', '#10b981', '#06b6d4', '#8b5cf6'];

        // Simple bar chart
        const barWidth = 60;
        const barSpacing = 80;
        const maxHeight = 150;
        const maxValue = Math.max(...data);

        data.forEach((value, i) => {
            const height = (value / maxValue) * maxHeight;
            const x = i * barSpacing + 50;
            const y = canvas.height - height - 30;

            ctx.fillStyle = colors[i];
            ctx.fillRect(x, y, barWidth, height);
            
            ctx.fillStyle = '#1f2937';
            ctx.font = '12px Inter';
            ctx.textAlign = 'center';
            ctx.fillText(labels[i], x + barWidth/2, canvas.height - 10);
            ctx.fillText(value.toLocaleString(), x + barWidth/2, y - 5);
        });
    },

    enhanceCarbonCalculator() {
        const calculator = document.querySelector('.carbon-calculator');
        if (!calculator) return;

        const resultsDiv = document.getElementById('carbonResults');
        if (resultsDiv) {
            const chartCanvas = document.createElement('canvas');
            chartCanvas.id = 'carbonChart';
            chartCanvas.width = 300;
            chartCanvas.height = 150;
            resultsDiv.appendChild(chartCanvas);
        }

        const calculateBtn = document.getElementById('calculateCarbon');
        if (calculateBtn) {
            calculateBtn.addEventListener('click', () => {
                setTimeout(() => this.drawCarbonChart(), 100);
            });
        }
    },

    drawCarbonChart() {
        const canvas = document.getElementById('carbonChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const electricity = parseFloat(document.getElementById('electricity').value) || 0;
        const transport = parseFloat(document.getElementById('transport').value) || 0;
        const waste = parseFloat(document.getElementById('waste').value) || 0;

        const data = [electricity * 0.5, transport * 0.2, waste * 4];
        const labels = ['Electricity', 'Transport', 'Waste'];
        const colors = ['#ef4444', '#f97316', '#eab308'];

        // Pie chart
        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2;
        const radius = 60;
        const total = data.reduce((a, b) => a + b, 0);

        let currentAngle = 0;
        data.forEach((value, i) => {
            const sliceAngle = (value / total) * 2 * Math.PI;
            
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
            ctx.lineTo(centerX, centerY);
            ctx.fillStyle = colors[i];
            ctx.fill();
            
            currentAngle += sliceAngle;
        });
    }
};

document.addEventListener('DOMContentLoaded', () => {
    Charts.init();
});