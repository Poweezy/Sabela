// Micro-interactions and Feedback System
const MicroInteractions = {
    init() {
        this.addButtonFeedback();
        this.addHoverEffects();
        this.addClickRipples();
        this.addTooltips();
    },

    addButtonFeedback() {
        document.querySelectorAll('.btn').forEach(btn => {
            btn.addEventListener('mousedown', () => {
                btn.style.transform = 'scale(0.95)';
            });
            
            btn.addEventListener('mouseup', () => {
                btn.style.transform = '';
            });
        });
    },

    addHoverEffects() {
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('mouseenter', () => {
                link.style.transform = 'translateY(-2px)';
            });
            
            link.addEventListener('mouseleave', () => {
                link.style.transform = '';
            });
        });
    },

    addClickRipples() {
        document.querySelectorAll('.btn, .card').forEach(el => {
            el.addEventListener('click', (e) => {
                const ripple = document.createElement('span');
                const rect = el.getBoundingClientRect();
                const size = Math.max(rect.width, rect.height);
                const x = e.clientX - rect.left - size / 2;
                const y = e.clientY - rect.top - size / 2;
                
                ripple.style.cssText = `
                    position: absolute;
                    width: ${size}px;
                    height: ${size}px;
                    left: ${x}px;
                    top: ${y}px;
                    background: rgba(255,255,255,0.3);
                    border-radius: 50%;
                    transform: scale(0);
                    animation: ripple 0.6s ease-out;
                    pointer-events: none;
                `;
                
                el.style.position = 'relative';
                el.style.overflow = 'hidden';
                el.appendChild(ripple);
                
                setTimeout(() => ripple.remove(), 600);
            });
        });
    },

    addTooltips() {
        document.querySelectorAll('[data-tooltip]').forEach(el => {
            const tooltip = document.createElement('div');
            tooltip.className = 'tooltip';
            tooltip.textContent = el.dataset.tooltip;
            document.body.appendChild(tooltip);

            el.addEventListener('mouseenter', (e) => {
                const rect = el.getBoundingClientRect();
                tooltip.style.cssText = `
                    position: fixed;
                    top: ${rect.top - 40}px;
                    left: ${rect.left + rect.width/2}px;
                    transform: translateX(-50%);
                    background: rgba(0,0,0,0.8);
                    color: white;
                    padding: 8px 12px;
                    border-radius: 4px;
                    font-size: 12px;
                    z-index: 10000;
                    opacity: 1;
                    transition: opacity 0.2s;
                `;
            });

            el.addEventListener('mouseleave', () => {
                tooltip.style.opacity = '0';
            });
        });
    }
};

// Add ripple animation CSS
const style = document.createElement('style');
style.textContent = `
    @keyframes ripple {
        to { transform: scale(4); opacity: 0; }
    }
    .tooltip { opacity: 0; pointer-events: none; }
`;
document.head.appendChild(style);

document.addEventListener('DOMContentLoaded', () => {
    MicroInteractions.init();
});